/* Copyright 2018 Endless Mobile, Inc.
 *
 * libhackable is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * libhackable is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with eos-discovery-feed.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authors:
 * - Sam Spilsbury <sam@endlessm.com>
 */

#pragma once

/**
 * SECTION:version-information
 * @title: Version Information
 * @short_description: Variables and functions to check the library version
 *
 * Some macros to check the version of the content library.
 */

/**
 * HACKABLE_MAJOR_VERSION:
 *
 * Major version number (API level) of the HACKABLE library.
 * For example, this is 0 for version 0.6.1.
 */
#define HACKABLE_MAJOR_VERSION (@HACKABLE_MAJOR_VERSION@)
/**
 * HACKABLE_MINOR_VERSION:
 *
 * Minor version number of the HACKABLE library.
 * For example, this is 6 for version 0.6.1.
 */
#define HACKABLE_MINOR_VERSION (@HACKABLE_MINOR_VERSION@)
/**
 * HACKABLE_MICRO_VERSION:
 *
 * Micro version number of the HACKABLE library.
 * For example, this is 1 for version 0.6.1.
 */
#define HACKABLE_MICRO_VERSION (@HACKABLE_MICRO_VERSION@)

/**
 * HACKABLE_VERSION_S:
 *
 * Evaluates to a string with the version of HACKABLE, useful for concatenating
 * or for printing.
 */
#define HACKABLE_VERSION_S "@HACKABLE_MAJOR_VERSION@.@HACKABLE_MINOR_VERSION@.@HACKABLE_MICRO_VERSION@"

#define _HACKABLE_ENCODE_VERSION(major,minor,micro) \
    ((major) << 24 | (minor) << 16 | (micro) << 8)

/**
 * HACKABLE_VERSION:
 *
 * Evaluates to an encoded integer representation of the HACKABLE version, useful
 * for compile-time version comparisons.
 *
 * Use %HACKABLE_ENCODE_VERSION to generate an integer representation that can be
 * compared to the result of this macro, e.g.:
 *
 * |[<!-- language="C" -->
 * #if HACKABLE_VERSION >= HACKABLE_ENCODE_VERSION (0, 6, 1)
 *   // code that can be used with HACKABLE 0.6.1 or later
 * #elif
 *   // code that can be used with earlier versions of HACKABLE
 * #endif
 * ]|
 */
#define HACKABLE_VERSION \
  (_HACKABLE_ENCODE_VERSION (HACKABLE_MAJOR_VERSION, HACKABLE_MINOR_VERSION, HACKABLE_MICRO_VERSION))

/**
 * HACKABLE_ENCODE_VERSION:
 * @major: the major version number, e.g. 0
 * @minor: the minor version number, e.g. 6
 * @micro: the micro version number, e.g. 1
 *
 * Generates an integer-encoded representation of a HACKABLE version, useful for
 * compile-time comparisons with %HACKABLE_VERSION.
 */
#define HACKABLE_ENCODE_VERSION(major,minor,micro) \
  (_HACKABLE_ENCODE_VERSION ((major), (minor), (micro))
